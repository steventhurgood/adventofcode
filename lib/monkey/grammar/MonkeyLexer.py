# Generated from Monkey.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,205,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,4,12,192,8,12,11,12,12,12,
        193,1,13,1,13,1,14,5,14,199,8,14,10,14,12,14,202,9,14,1,14,1,14,
        0,0,15,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,1,0,2,1,0,48,57,2,0,94,94,110,110,206,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,
        3,39,1,0,0,0,5,41,1,0,0,0,7,65,1,0,0,0,9,71,1,0,0,0,11,74,1,0,0,
        0,13,80,1,0,0,0,15,83,1,0,0,0,17,105,1,0,0,0,19,135,1,0,0,0,21,166,
        1,0,0,0,23,185,1,0,0,0,25,191,1,0,0,0,27,195,1,0,0,0,29,200,1,0,
        0,0,31,32,5,77,0,0,32,33,5,111,0,0,33,34,5,110,0,0,34,35,5,107,0,
        0,35,36,5,101,0,0,36,37,5,121,0,0,37,38,5,32,0,0,38,2,1,0,0,0,39,
        40,5,58,0,0,40,4,1,0,0,0,41,42,5,32,0,0,42,43,5,32,0,0,43,44,5,79,
        0,0,44,45,5,112,0,0,45,46,5,101,0,0,46,47,5,114,0,0,47,48,5,97,0,
        0,48,49,5,116,0,0,49,50,5,105,0,0,50,51,5,111,0,0,51,52,5,110,0,
        0,52,53,5,58,0,0,53,54,5,32,0,0,54,55,5,110,0,0,55,56,5,101,0,0,
        56,57,5,119,0,0,57,58,5,32,0,0,58,59,5,61,0,0,59,60,5,32,0,0,60,
        61,5,111,0,0,61,62,5,108,0,0,62,63,5,100,0,0,63,64,5,32,0,0,64,6,
        1,0,0,0,65,66,5,42,0,0,66,67,5,32,0,0,67,68,5,111,0,0,68,69,5,108,
        0,0,69,70,5,100,0,0,70,8,1,0,0,0,71,72,5,42,0,0,72,73,5,32,0,0,73,
        10,1,0,0,0,74,75,5,43,0,0,75,76,5,32,0,0,76,77,5,111,0,0,77,78,5,
        108,0,0,78,79,5,100,0,0,79,12,1,0,0,0,80,81,5,43,0,0,81,82,5,32,
        0,0,82,14,1,0,0,0,83,84,5,32,0,0,84,85,5,32,0,0,85,86,5,84,0,0,86,
        87,5,101,0,0,87,88,5,115,0,0,88,89,5,116,0,0,89,90,5,58,0,0,90,91,
        5,32,0,0,91,92,5,100,0,0,92,93,5,105,0,0,93,94,5,118,0,0,94,95,5,
        105,0,0,95,96,5,115,0,0,96,97,5,105,0,0,97,98,5,98,0,0,98,99,5,108,
        0,0,99,100,5,101,0,0,100,101,5,32,0,0,101,102,5,98,0,0,102,103,5,
        121,0,0,103,104,5,32,0,0,104,16,1,0,0,0,105,106,5,32,0,0,106,107,
        5,32,0,0,107,108,5,32,0,0,108,109,5,32,0,0,109,110,5,73,0,0,110,
        111,5,102,0,0,111,112,5,32,0,0,112,113,5,116,0,0,113,114,5,114,0,
        0,114,115,5,117,0,0,115,116,5,101,0,0,116,117,5,58,0,0,117,118,5,
        32,0,0,118,119,5,116,0,0,119,120,5,104,0,0,120,121,5,114,0,0,121,
        122,5,111,0,0,122,123,5,119,0,0,123,124,5,32,0,0,124,125,5,116,0,
        0,125,126,5,111,0,0,126,127,5,32,0,0,127,128,5,109,0,0,128,129,5,
        111,0,0,129,130,5,110,0,0,130,131,5,107,0,0,131,132,5,101,0,0,132,
        133,5,121,0,0,133,134,5,32,0,0,134,18,1,0,0,0,135,136,5,32,0,0,136,
        137,5,32,0,0,137,138,5,32,0,0,138,139,5,32,0,0,139,140,5,73,0,0,
        140,141,5,102,0,0,141,142,5,32,0,0,142,143,5,102,0,0,143,144,5,97,
        0,0,144,145,5,108,0,0,145,146,5,115,0,0,146,147,5,101,0,0,147,148,
        5,58,0,0,148,149,5,32,0,0,149,150,5,116,0,0,150,151,5,104,0,0,151,
        152,5,114,0,0,152,153,5,111,0,0,153,154,5,119,0,0,154,155,5,32,0,
        0,155,156,5,116,0,0,156,157,5,111,0,0,157,158,5,32,0,0,158,159,5,
        109,0,0,159,160,5,111,0,0,160,161,5,110,0,0,161,162,5,107,0,0,162,
        163,5,101,0,0,163,164,5,121,0,0,164,165,5,32,0,0,165,20,1,0,0,0,
        166,167,5,32,0,0,167,168,5,32,0,0,168,169,5,83,0,0,169,170,5,116,
        0,0,170,171,5,97,0,0,171,172,5,114,0,0,172,173,5,116,0,0,173,174,
        5,105,0,0,174,175,5,110,0,0,175,176,5,103,0,0,176,177,5,32,0,0,177,
        178,5,105,0,0,178,179,5,116,0,0,179,180,5,101,0,0,180,181,5,109,
        0,0,181,182,5,115,0,0,182,183,5,58,0,0,183,184,5,32,0,0,184,22,1,
        0,0,0,185,186,5,44,0,0,186,187,5,32,0,0,187,188,1,0,0,0,188,189,
        6,11,0,0,189,24,1,0,0,0,190,192,7,0,0,0,191,190,1,0,0,0,192,193,
        1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,26,1,0,0,0,195,196,5,
        10,0,0,196,28,1,0,0,0,197,199,7,1,0,0,198,197,1,0,0,0,199,202,1,
        0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,
        0,0,0,203,204,5,10,0,0,204,30,1,0,0,0,3,0,193,200,1,6,0,0
    ]

class MonkeyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    ITEMS_PREFIX = 11
    COMMA = 12
    INT = 13
    NL = 14
    LINE = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Monkey '", "':'", "'  Operation: new = old '", "'* old'", 
            "'* '", "'+ old'", "'+ '", "'  Test: divisible by '", "'    If true: throw to monkey '", 
            "'    If false: throw to monkey '", "'  Starting items: '", 
            "', '", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "ITEMS_PREFIX", "COMMA", "INT", "NL", "LINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "ITEMS_PREFIX", "COMMA", "INT", 
                  "NL", "LINE" ]

    grammarFileName = "Monkey.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


